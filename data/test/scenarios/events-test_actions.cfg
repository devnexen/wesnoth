
# These are kinda a duplicate of the basic unit test system sanity tests, but... they seems to fit here as well...
{GENERIC_UNIT_TEST "event_test_action_wml" (
    [event]
        name=start
        {SUCCEED}
    [/event]
)}

{GENERIC_UNIT_TEST "event_test_lua_serializable" (
    [event]
        name=start
        code=<<unit_test.pass_if(true, 'return true')>>
    [/event]
)}

# This one is different - it tests that dynamically added events work
{GENERIC_UNIT_TEST "event_test_lua_dynamic" (
    [event]
        name=preload
        code=<<
            wesnoth.game_events.add('new turn', function()
                unit_test.pass_if(true, 'return true')
            end)
        >>
    [/event]
)}
{GENERIC_UNIT_TEST "event_test_lua_dynamic_advanced" (
    [event]
        name=preload
        code=<<
            wesnoth.game_events.add{
                name = 'new turn',
                action = function()
                    unit_test.pass_if(true, 'return true')
                end
            }
        >>
    [/event]
)}
{GENERIC_UNIT_TEST "event_test_lua_dynamic_repeat" (
    [event]
        name=preload
        code=<<
            wml.variables.triggers = 0
            wesnoth.game_events.add{
                name = 'new turn',
                first_time_only = false,
                action = function()
                    wml.variables.triggers = wml.variables.triggers + 1
                end
            }
        >>
    [/event]
    [event]
        name=side 1 turn 1
        [end_turn][/end_turn]
    [/event]
    [event]
        name=side 2 turn 1
        [end_turn][/end_turn]
    [/event]
    [event]
        name=side 1 turn 2
        [end_turn][/end_turn]
    [/event]
    [event]
        name=side 2 turn 2
        {RETURN ({VARIABLE_CONDITIONAL triggers equals 2})}
    [/event]
)}

{GENERIC_UNIT_TEST "event_test_lua_dynamic_break_save" (
    [event]
        name=start
        code=<<
            wesnoth.game_events.add{
                name = 'new turn',
                action = function() end
            }
            unit_test.pass_if(true, 'return true')
        >>
    [/event]
)}