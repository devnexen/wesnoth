# Tests that "assert true, return true" works.
# This is a sanity check of the unit testing mechanism.
{GENERIC_UNIT_TEST "test_assert" (
    [event]
        name = start
        {ASSERT ([true][/true])}
        {RETURN ([true][/true])}
    [/event]
)}

# Tests that "assert false, return true" fails.
# This is a sanity check of the unit testing mechanism.
{GENERIC_UNIT_TEST "test_assert_fail" (
    [event]
        name = start
        {ASSERT ([not][true][/true][/not])}
        {RETURN ([true][/true])}
    [/event]
)}

# Tests that "assert true, return false" fails.
# This is a sanity check of the unit testing mechanism.
{GENERIC_UNIT_TEST "test_assert_fail_two" (
    [event]
        name = start
        {ASSERT ([true][/true])}
        {RETURN ([not][true][/true][/not])}
    [/event]
)}

# Same as the above three but using the Lua unit_test module
{GENERIC_UNIT_TEST "test_lua_assert" (
    [event]
        name = start
        code=<<
            unit_test.assert(true, 'assert true')
            unit_test.pass_if(true, 'return true')
        >>
    [/event]
)}
{GENERIC_UNIT_TEST "test_lua_assert_fail" (
    [event]
        name = start
        code=<<
            unit_test.assert(false, 'assert false')
            unit_test.pass_if(true, 'return true')
        >>
    [/event]
)}
{GENERIC_UNIT_TEST "test_lua_assert_fail_two" (
    [event]
        name = start
        code=<<
            unit_test.assert(true, 'assert true')
            unit_test.pass_if(false, 'return false')
        >>
    [/event]
)}

# Test the comparison assertions from the Lua unit_test module
{GENERIC_UNIT_TEST "test_lua_assert_compare" (
    [event]
        name=start
        code=<<
            unit_test.assert_equal('foo', 'foo', 'string equality')
            unit_test.assert_not_equal('foo', 'bar', 'string inequality')
            unit_test.assert_greater('foo', 'bar', 'string ordering')
            unit_test.assert_equal(1, 1, 'numeric equality')
            unit_test.assert_not_equal(1, 2, 'numeric inequality')
            unit_test.assert_greater(2, 1, 'numeric greater-than')
            unit_test.assert_less(1, 2, 'numeric less-than')
            unit_test.assert_in_range(1, 0, 2, 'numeric in-range')
            unit_test.assert_approx_equal(1, 1.0001, 0.0001, 'numeric approx-equal')
            unit_test.pass_if(true, 'success')
        >>
    [/event]
)}
{GENERIC_UNIT_TEST "test_lua_assert_compare_fail" (
    [event]
        name=start
        code=<<
            unit_test.assert_equal('foo', 'bar', 'string equality')
            unit_test.assert_not_equal('foo', 'foo', 'string inequality')
            unit_test.assert_less('foo', 'bar', 'string ordering')
            unit_test.assert_equal(1, 2, 'numeric equality')
            unit_test.assert_not_equal(1, 1, 'numeric inequality')
            unit_test.assert_greater(1, 2, 'numeric greater-than')
            unit_test.assert_less(2, 1, 'numeric less-than')
            unit_test.assert_in_range(1, 2, 5, 'numeric in-range')
            unit_test.assert_approx_equal(1, 1.001, 0.0001, 'numeric approx-equal')
            unit_test.pass_if(true, 'success')
        >>
    [/event]
)}
